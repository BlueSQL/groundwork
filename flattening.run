#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

if [ "$USER" != "root" -o "$UID" -ne 0 ]; then
    >&2 echo -e "${RED}Error: Must run as root.\nTry \"sudo $0\"${NC}"
    exit 1
fi

set -e
umask 0022

[ -z "${BLUESQL_PYTHON}" ] && BLUESQL_PYTHON="3.10.14"

SSH_OPTS="-oStrictHostKeyChecking=accept-new"
ID=$(source /etc/os-release; echo "${ID}")
VERSION_ID=$(source /etc/os-release; echo "${VERSION_ID}")

function get_yn {
    read -s -n 1; while [ "${REPLY}" != "Y" -a  "${REPLY}" != "y" -a  "${REPLY}" != "N" -a  "${REPLY}" != "n" ]; do read -s -n 1; done
}

function change_root_password {
    if [ ! -e /etc/ssh/sshd_config.d/01-permitrootlogin.conf ]; then
        if [ "${ID}" = "rocky" ]; then
            dnf makecache -y
            dnf install -y --allowerasing openssh-server
            dnf list --installed openssh-server >/dev/null 2>&1 || (>&2 echo -e "${RED}Error: The package is not installed: openssh-server${NC}"; exit 1)
        fi
        if [ "${ID}" = "ubuntu" ]; then
            DEBIAN_FRONTEND=noninteractive apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-server
            [ "`apt list openssh-server 2>/dev/null | wc -l`" -gt 1 ] || (>&2 echo -e "${RED}Error: The package is not installed: openssh-server${NC}"; exit 1)
        fi
        echo -e "${GREEN}Enable root login over SSH.${NC}"
        echo -e "# This file has been generated by the BlueSQL.\n# Allow root to log in using ssh. Remove this file to opt-out\nPermitRootLogin yes" >/etc/ssh/sshd_config.d/01-permitrootlogin.conf
        if [ "${ID}" = "rocky" ]; then systemctl reload sshd; fi
        if [ "${ID}" = "ubuntu" ]; then systemctl reload ssh; fi
    fi
    if [ -z "${BLUESQL_PASSWORD}" ]; then
        echo -e "${GREEN}Are you changing your root password? (Y/N)"
        get_yn && [ "${REPLY}" = "Y" -o "${REPLY}" = "y" ] && passwd
        echo -ne "${NC}"
        echo -ne "${GREEN}Enter root password: "
        read -s BLUESQL_PASSWORD
        echo -e "${NC}"
    else
        echo "root:${BLUESQL_PASSWORD}" | chpasswd
    fi
    if [ -z "${BLUESQL_DELETE}" ]; then
        echo -e "${GREEN}Do you want to delete root password after flattening? (Y/N)${NC}"
        get_yn
        BLUESQL_DELETE="${REPLY}"
    fi
}

function docker_yn {
    if [ -z "${BLUESQL_DOCKER}" ]; then
        echo -e "${GREEN}Would you like to install Docker? (Y/N)${NC}"
        get_yn
        BLUESQL_DOCKER="${REPLY}"
    fi
    if [ "${BLUESQL_DOCKER}" = "Y" -o "${BLUESQL_DOCKER}" = "y" ]; then
        if [ -z "${BLUESQL_DOCKER_PULL}" ]; then
            echo -e "${GREEN}Would you like to download BlueSQL Package? (Y/N)${NC}"
            get_yn
            BLUESQL_DOCKER_PULL="${REPLY}"
        fi
    fi
    if [ "${BLUESQL_DOCKER_PULL}" = "Y" -o "${BLUESQL_DOCKER_PULL}" = "y" ]; then
        if [ -z "${BLUESQL_DOCKER_LOGIN}" ]; then
            echo -ne "${GREEN}Enter docker login id: "
            read BLUESQL_DOCKER_LOGIN
            echo -ne "${NC}"
        fi
        if [ -z "${BLUESQL_DOCKER_TOKEN}" ]; then
            echo -ne "${GREEN}Enter docker token: "
            read BLUESQL_DOCKER_TOKEN
            echo -ne "${NC}"
        fi
        if [ -z "${BLUESQL_VERSION}" ]; then
            echo -ne "${GREEN}Enter BlueSQL version: "
            read BLUESQL_VERSION
            echo -ne "${NC}"
        fi
    fi
}

function remove_hostname {
    if [ "${ID}" = "ubuntu" ]; then grep -v "^127.0.1.1 " /etc/hosts >/tmp/hosts && mv /tmp/hosts /etc/hosts; fi
}

function check_root_login {
    echo -e "${GREEN}Check root login with password over SSH.${NC}"
    if [ "${ID}" = "rocky" ]; then dnf makecache -y; dnf install -y sshpass; fi
    if [ "${ID}" = "ubuntu" ]; then DEBIAN_FRONTEND=noninteractive apt-get update -y; DEBIAN_FRONTEND=noninteractive apt-get install -y sshpass; fi
    echo -ne "${GREEN}"
    sshpass -p "${BLUESQL_PASSWORD}" ssh ${SSH_OPTS} -o PreferredAuthentications=password -o PubkeyAuthentication=no root@localhost echo "Login Success"
    echo -ne "${NC}"
}

function set_locale_and_timezone_for_rocky {
    PACKAGES="glibc-langpack-en glibc-langpack-ko"
    echo -e "${GREEN}Locale and time zone settings.${NC}"
    dnf makecache -y
    dnf install -y $PACKAGES
    for package in $PACKAGES; do dnf list --installed $package >/dev/null 2>&1 || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    set +e; cp /usr/share/zoneinfo/Asia/Seoul /etc/localtime; set -e
    echo "Asia/Seoul" >/etc/timezone
}

function set_locale_and_timezone_for_ubuntu {
    PACKAGES="locales tzdata"
    echo -e "${GREEN}Locale and time zone settings.${NC}"
    DEBIAN_FRONTEND=noninteractive apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y $PACKAGES
    for package in $PACKAGES; do [ "`apt list $package 2>/dev/null | wc -l`" -gt 1 ] || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    locale-gen en_US.UTF-8
    locale-gen ko_KR.UTF-8
    set +e; cp /usr/share/zoneinfo/Asia/Seoul /etc/localtime; set -e
    echo "Asia/Seoul" >/etc/timezone
}

function install_python {
    echo -e "${GREEN}Install Python ${BLUESQL_PYTHON}.${NC}"
    if [ "${ID}" = "rocky" ]; then
        PACKAGES="git gcc bzip2 bzip2-devel openssl openssl-devel readline readline-devel sqlite-devel tk-devel lm_sensors-libs"
        echo 'PATH="/opt/pyenv/shims:/opt/pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"' > /etc/environment
        dnf install -y $PACKAGES
        for package in $PACKAGES; do dnf list --installed $package >/dev/null 2>&1 || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    fi
    if [ "${ID}" = "ubuntu" ]; then
        PACKAGES="git make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev"
        echo 'PATH="/opt/pyenv/shims:/opt/pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"' > /etc/environment
        DEBIAN_FRONTEND=noninteractive apt-get install -y $PACKAGES
        for package in $PACKAGES; do [ "`apt list $package 2>/dev/null | wc -l`" -gt 1 ] || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    fi
    export PYENV_ROOT=/opt/pyenv
    export PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
    rm -rf "${PYENV_ROOT}" && curl https://pyenv.run >/tmp/pyenv.run && bash /tmp/pyenv.run && rm -f /tmp/pyenv.run
    pyenv install ${BLUESQL_PYTHON} && pyenv global ${BLUESQL_PYTHON} && pyenv rehash
    echo -e "${GREEN}Check python path.${NC}"
    PYTHON_PATH=`sshpass -p "${BLUESQL_PASSWORD}" ssh ${SSH_OPTS} localhost which python3`
    [ "${PYTHON_PATH}" != "/opt/pyenv/shims/python3" ] && (>&2 echo -e "${RED}Error: Python not found: \"${PYTHON_PATH}\"${NC}"; exit 1)
    echo -e "${GREEN}Python installed: \"${PYTHON_PATH}\".${NC}"
}

function install_packages_for_rocky {
    PACKAGES="openssh-server openssh-clients sudo iproute iputils net-tools firewalld tcpdump createrepo_c curl wget nmap-ncat pcp-system-tools mlocate ncdu ncurses vim-enhanced procps-ng htop jq oniguruma dos2unix tmux openssl-devel git rsync sshpass httpd rpm-build cmake make gcc-c++ gdb valgrind java-11-openjdk-devel bzip2"
    MODULES="Flask getmac passlib"
    echo -e "${GREEN}Install Rocky linux packages.${NC}"
    dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
    dnf install -y --allowerasing $PACKAGES
    dnf update -y
    for package in $PACKAGES; do dnf list --installed $package >/dev/null 2>&1 || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    curl -o /tmp/slang-2.3.3.tar.bz2 https://www.jedsoft.org/releases/slang/slang-2.3.3.tar.bz2
    curl -o /tmp/jed-0.99-19.tar.gz https://www.jedsoft.org/releases/jed/jed-0.99-19.tar.gz
    bzip2 -d </tmp/slang-2.3.3.tar.bz2 | tar xvf - && ( cd slang-2.3.3; ./configure --enable-shared=no && make && make install ) && rm -rf slang-2.3.3 /tmp/slang-2.3.3.tar.bz2
    tar xvzf /tmp/jed-0.99-19.tar.gz && ( cd jed-0.99-19; ./configure --enable-shared=no && make && make install ) && rm -rf jed-0.99-19 /tmp/jed-0.99-19.tar.gz
    echo -e "${GREEN}Install Python modules.${NC}"
    /opt/pyenv/shims/pip3 install --upgrade pip setuptools wheel
    /opt/pyenv/shims/pip3 install --ignore-installed $MODULES
    for module in pip setuptools wheel $MODULES; do [ "`/opt/pyenv/shims/pip3 list | grep \"^${module}\" | wc -l`" -ge 1 ] || (>&2 echo -e "${RED}Error: The module is not installed: ${module}${NC}"; exit 1); done
}

function install_packages_for_ubuntu {
    PACKAGES="kmod init systemd cron openssh-server sudo iputils-ping iproute2 net-tools firewalld tcpdump python3 python3-pip curl wget netcat jq dstat htop plocate ncdu vim jed"
    MODULES="Flask getmac passlib"
    echo -e "${GREEN}Install Ubuntu packages.${NC}"
    DEBIAN_FRONTEND=noninteractive apt-get install -y $PACKAGES
    DEBIAN_FRONTEND=noninteractive apt-get upgrade -y --with-new-pkgs
    for package in $PACKAGES; do [ "`apt list $package 2>/dev/null | wc -l`" -gt 1 ] || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    echo -e "${GREEN}Install Python modules.${NC}"
    /opt/pyenv/shims/pip3 install --upgrade pip setuptools wheel
    /opt/pyenv/shims/pip3 install --ignore-installed $MODULES
    for module in pip setuptools wheel $MODULES; do [ "`/opt/pyenv/shims/pip3 list | grep \"^${module}\" | wc -l`" -ge 1 ] || (>&2 echo -e "${RED}Error: The module is not installed: ${module}${NC}"; exit 1); done
}

function install_docker_for_rocky {
    if [ "${BLUESQL_DOCKER}" = "Y" -o "${BLUESQL_DOCKER}" = "y" ]; then
        PACKAGES="docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
        echo -e "${GREEN}Install Docker packages.${NC}"
        dnf install -y yum-utils
        yum-config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
        dnf makecache -y
        dnf install -y $PACKAGES
        for package in $PACKAGES; do dnf list --installed $package >/dev/null 2>&1 || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
        systemctl enable docker.socket
        systemctl enable docker
        systemctl start docker
    fi
}

function install_docker_for_ubuntu {
    if [ "${BLUESQL_DOCKER}" = "Y" -o "${BLUESQL_DOCKER}" = "y" ]; then
        PACKAGES="docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin"
        echo -e "${GREEN}Install Docker packages.${NC}"
        DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates curl
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
        DEBIAN_FRONTEND=noninteractive apt-get update -y
        DEBIAN_FRONTEND=noninteractive apt-get install -y $PACKAGES
        for package in $PACKAGES; do [ "`apt list $package 2>/dev/null | wc -l`" -gt 1 ] || (>&2 echo -e "${RED}Error: The package is not installed: ${package}${NC}"; exit 1); done
    fi
}

function download_docker_image {
    if [ "${BLUESQL_DOCKER_PULL}" = "Y" -o "${BLUESQL_DOCKER_PULL}" = "y" ]; then
        echo -e "${GREEN}Download BlueSQL package.${NC}"
        echo "${BLUESQL_DOCKER_TOKEN}" | docker login --username "${BLUESQL_DOCKER_LOGIN}" --password-stdin
        docker pull "bluesql/${ID}`echo ${VERSION_ID}|cut -d . -f 1`-package:${BLUESQL_VERSION}"
        echo "y" | docker image prune
    fi
}

function set_profile {
    echo -e "${GREEN}Disable daily messages.${NC}"
    if [ ! -e "${HOME}/.hushlogin" ]; then touch "${HOME}/.hushlogin"; fi
}

function delete_password {
    if [ "${BLUESQL_DELETE}" = "Y" -o "${BLUESQL_DELETE}" = "y" ]; then passwd --delete root; echo -e "${GREEN}Root password has been deleted.${NC}"; fi
}

echo -e "${GREEN}Begin flattening for \"${ID} ${VERSION_ID}\"${NC}"

case "${ID}" in
  "rocky")
    case "${VERSION_ID}" in
      "9.4")
        change_root_password
        docker_yn
        remove_hostname
        check_root_login
        set_locale_and_timezone_for_rocky
        install_python
        install_packages_for_rocky
        install_docker_for_rocky
        download_docker_image
        set_profile
        delete_password
        ;;
      *)
        >&2 echo -e "${RED}Error: Unsupported Rocky Linux version: ${VERSION_ID}${NC}"
        exit 1
        ;;
    esac
    ;;
  "ubuntu")
    case "${VERSION_ID}" in
      "22.04")
        change_root_password
        docker_yn
        remove_hostname
        check_root_login
        set_locale_and_timezone_for_ubuntu
        install_python
        install_packages_for_ubuntu
        install_docker_for_ubuntu
        download_docker_image
        set_profile
        delete_password
        ;;
      *)
        >&2 echo -e "${RED}Error: Unsupported Ubuntu version: ${VERSION_ID}${NC}"
        exit 1
        ;;
    esac
    ;;
  *)
    >&2 echo -e "${RED}Error: Unsupported Linux distro: ${ID}${NC}"
    exit 1
    ;;
esac

echo -e "${GREEN}End flattening for \"${ID} ${VERSION_ID}\"${NC}"

exit 0
